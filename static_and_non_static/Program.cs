//Классы. Класс это шаблон будущего объекта или же библиотека методов (набор методов) которые мы можем  из этого класса вызывать
// в c# любая программа находится в каком-то классе
// для того чтобы класс был приватным надо ничего не писать перед  типом метода и автоматически метод будет приватным (void Init(out init[] array, int Length) тогда к методу нельзя будет обратиться из другого класса
//Для того чтобы к методу можно было обратиться из другого классса перед типом метода нужно написать что он статический и публичный " "public" ( public void Init(out init[] array, int Length)
// "static" - необходимо указывать перед типом метода, статический тип это некая часть библиотеки,   статичесткий член класса не требует создания экземпляра класса и присутствует в памяти с самого начала запуска программы  и мы можем обращаться к методу который отмечен как "static" просто по названию класса
// так описываем класс

class Program 
{
    static void Main() //метод в котором будет записана основная программа (Точка входа в программу) именно с этого метода начинает выполняться программа
    {   
        //обращение к местодо который static
        int[] array; // создали некоторую переменную array;
        MyLibrary.Init(out array,20); // таким способом мы обращаемся в нашему статическому методу  Init в котором хронится метод создания массива и передаем туда переменную
//------------------------------------------------------------------------------------------------------------------------------------------
        //обращение к методу который не static
        MyClass myClass = new MyClass(); // создаем некоторый объект(т.е. создаем экземпляр класса), и уже через этот объект будем  обращаться к методу Init т.к. в методе Init  класса class MyClass отсутствует static, мы не можем обратиться к методу Init пока не создадим экземпляр класса
        myClass.Init (10);// обращаемся к методу Init через вышесозданный объект myClass и задаем рамер массива(10)

//---------------------------------------------------------------------------------------------------------------------------------
        MyClass myClass1 = new MyClass();
        MyClass myClass2 = new MyClass();
        MyClass myClass3 = new MyClass(); //в отличае от метода который "static" при создании нового объекта мы можем создавать новую переменную находящуюся в классе MyClass и она будет принадлежать новому объекту (myClass1 myClass2 myClass3) потому что стратический метод не принадлежит одному классу и чтобы его запустить нам надо передать в него переменную 
    //----------------------------------------------------------------------------------------------------------------
    // пример про эльфов и других персонажей игры
         MyClass.Init(10);
        Person.Count=0; // при задаче посчитать кол-во персонажей // 
        Person elf=new Person(); // персонаж эльф
        elf.Create(100,50,1); // исходные данные эльфа здоровье 100, сила 50, статус 1
        Person dwarf=new Person(); // другой персонаж
        dwarf.Create(100,80,2); // исходные данные персонажа
        elf.Run();
        dwarf.Die();
    }
}

class Person //класс песронаж игры
{
    //данные  которые будут заложены в персонажа игры (характеристики/шаблон)
    int health; // здоровье
    int power; // сила
    int status; // статус жив не жив
    public static int Count=0; // если перед Cоunt поставить слово "static" то  Cоunt не принадлежит каждому персонажу отдельно и при подсчете кол-ва персонажей будет 0 постоянно, то есть count не принажлежит отдельно никакому объекту он принадлежит всем сразу, а если "static" не будет то  мы получим просто счетчик персонажей
    
    public void Create(int health,int power,int status) // метод который создает персонажа с начальными значениями жизни мощности и т.д.
    {
        Count++; // кол-во персонажей увеличивается на 1 при их подстчете 
    }
    public void Run() //персонаж будет уметь бегать
    {
            Random random=new Random(); //нестатический класс поэтому для него мы создаем новую переменную и потом обращаемся к ней
            random.Next(1,10);
    }

    public void Die() // персонаж будет умирать и мы будем записывать что кол-во играков теперь меньше и т.д.
    {

    }
}

class MyClass
{
    int [] array;
      public void Init(out init[] array, int Length)
        {
            array= new init[Length];
            for(int i=0; i<Length; i++) array[i]=i;
        }
}

 class MyLibrary // например мы можем создать класс методов которые нам потом могут пригодиться. Обращаться к библиотеке (методу) можно из любого другого класса. В случае неуказания "public"  перед типом метода, метод будет приватным и к нему нельзя обратиться из другого класса
 { // например класс в котором будет метод создания массива
    static public void Init(out init[] array, int Length)
        {
            array= new init[Length];
            for(int i=0; i<Length; i++) array[i]=i;
        }
 }